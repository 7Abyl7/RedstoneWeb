<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Guía de Redstone </title>

    <!-- Bootstrap CSS -->
    <!-- CORREGIDO: 'integrity' en lugar de 'xintegrity' -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" xintegrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <!-- Google Fonts (Estilo Minecraft) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=VT323&display=swap" rel="stylesheet">

    <style>
        /* 
         * Fuentes: 'Press Start 2P' (Títulos), 'VT323' (Cuerpo)
         * Colores:
            #aa1515
            #e01111
            #adabab
            #483a3a
            #efe0e0 (rgb(239, 224, 224))
            #ffffff
         */
        
         :root {
            --mc-dark-red: #aa1515;
            --mc-bright-red: #e01111;
            --mc-medium-grey: #adabab;
            --mc-dark-grey: #483a3a;
            --mc-light-bg: #efe0e0;
            --mc-white: #ffffff;
            --mc-font-heading: 'Press Start 2P', cursive;
            --mc-font-body: 'VT323', monospace;
        }
        
        body {
            font-family: var(--mc-font-body);
            background-color: var(--mc-light-bg);
            color: var(--mc-dark-grey);
            font-size: 1.5rem;
            /* La fuente VT323 es pequeña la agrandamos */
            line-height: 1.6;
        }
        /* Estilos de fuentes principales */
        
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        .navbar-brand,
        .nav-link,
        .btn,
        .dropdown-item,
        .accordion-button,
        .form-label {
            font-family: var(--mc-font-heading);
            color: var(--mc-dark-grey);
        }
        
        h2 {
            font-size: 1.8rem;
        }
        
        h3 {
            font-size: 1.5rem;
        }
        /* Estilo pixelado para bordes */
        
        .pixel-border {
            border: 4px solid var(--mc-dark-grey);
            box-shadow: 6px 6px 0 var(--mc-medium-grey);
            background-color: var(--mc-white);
        }
        /* Página de Inicio de Sesión (Login)  */
        
        #login-view {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .login-card {
            max-width: 500px;
            width: 90%;
            padding: 2rem;
        }
        
        .login-card h2 {
            font-size: 1.5rem;
            text-align: center;
            color: var(--mc-dark-red);
        }
        
        .form-control {
            font-family: var(--mc-font-body);
            font-size: 1.2rem;
            border: 2px solid var(--mc-dark-grey);
        }
        
        .form-control:focus {
            border-color: var(--mc-dark-red);
            box-shadow: 0 0 10px var(--mc-bright-red);
        }
        
        .btn-mc {
            font-family: var(--mc-font-heading);
            background-color: var(--mc-dark-red);
            color: var(--mc-white);
            border: 2px solid var(--mc-dark-grey);
            padding: 0.5rem 1rem;
            font-size: 1rem;
            transition: all 0.2s ease;
        }
        
        .btn-mc:hover {
            background-color: var(--mc-bright-red);
            color: var(--mc-white);
            transform: translateY(-2px);
            box-shadow: 0 4px 0 var(--mc-dark-grey);
        }
        /*  Página Principal (Main View)  */
        /* Navbar (Header) */
        
        .navbar-mc {
            /* Textura de piedra de Minecraft */
            border-bottom: 6px solid var(--mc-dark-grey);
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
        }
        
        .navbar-brand {
            font-size: 1.2rem;
            color: var(--mc-dark-red);
        }
        
        .navbar-brand img {
            width: 40px;
            height: 40px;
            margin-right: 10px;
        }
        
        .nav-link {
            font-size: 0.8rem;
            color: var(--mc-dark-grey);
        }
        
        .nav-link.active,
        .nav-link:hover {
            color: var(--mc-dark-red);
        }
        
        .dropdown-menu {
            background-color: var(--mc-light-bg);
            border: 2px solid var(--mc-dark-grey);
            font-family: var(--mc-font-heading);
        }
        
        .dropdown-item {
            font-size: 0.8rem;
        }
        
        .dropdown-item:hover {
            background-color: var(--mc-dark-red);
            color: var(--mc-white);
        }
        /* Contenedor principal del contenido */
        
        #main-content {
            padding: 2rem 0;
        }
        /*   Seccion Guias de Mecanismos (Barra roja)  */
        
        .guides-header {
            background-color: var(--mc-dark-red);
            color: var(--mc-white);
            padding: 1rem;
            border-top: 4px solid var(--mc-dark-grey);
            border-bottom: 4px solid var(--mc-dark-grey);
            text-align: center;
        }
        
        .guides-header h3 {
            color: var(--mc-white);
            margin: 0;
            font-size: 1.2rem;
        }
        /* Navegación lateral (Sidebar) */
        
        .sidebar-nav .list-group-item {
            font-family: var(--mc-font-heading);
            font-size: 1rem;
            background-color: var(--mc-white);
            border: 2px solid var(--mc-dark-grey);
            margin-bottom: 0.5rem;
            color: var(--mc-dark-grey);
            cursor: pointer;
            text-align: center;
        }
        
        .sidebar-nav .list-group-item:hover,
        .sidebar-nav .list-group-item.active {
            background-color: var(--mc-medium-grey);
            color: var(--mc-white);
        }
        /* Area de contenido principal (Home, Bloques, Mecanismos) */
        
        .content-area {
            padding: 1.5rem;
        }
        
        .content-area h2 {
            color: var(--mc-dark-red);
            border-bottom: 4px solid var(--mc-medium-grey);
            padding-bottom: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .content-area img {
            border: 2px solid var(--mc-dark-grey);
            max-width: 100%;
            height: auto;
        }
        /*  Estilo Acordeón (Mecanismos) */
        
        .accordion-item {
            background-color: var(--mc-white);
            border: 2px solid var(--mc-dark-grey);
            margin-bottom: 1rem;
        }
        
        .accordion-button {
            font-size: 1rem;
            background-color: var(--mc-medium-grey);
            color: var(--mc-dark-grey);
        }
        
        .accordion-button:not(.collapsed) {
            background-color: var(--mc-dark-red);
            color: var(--mc-white);
            box-shadow: none;
        }
        
        .accordion-button:focus {
            box-shadow: none;
            border: none;
        }
        
        .accordion-button::after {
            /* Personalizar flecha de acordeón */
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23483a3a'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
        }
        
        .accordion-button:not(.collapsed)::after {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23ffffff'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
        }
        
        .accordion-body img {
            margin-bottom: 1rem;
        }
        /*  Estilo Pagina de Bloques */
        
        .block-entry {
            margin-bottom: 2rem;
        }
    </style>
</head>

<body>

    <!-- Contenedor principal de la aplicación -->
    <div id="app">

    </div>

    <!-- Bootstrap JS Bundle -->

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" xintegrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

    <!-- Lógica de la aplicación (Navegación y Vistas) -->
    <script>
        const app = document.getElementById('app');

        // --- PLANTILLAS HTML (Vistas) ---

        /**
         * Plantilla para la vista de Inicio de Sesión

         */
        const loginViewTemplate = `
            <div id="login-view">
                <div class="login-card pixel-border">
                    <div class="text-center mb-4">
                        <img src="https://static.wikia.nocookie.net/minecraft/images/d/d3/Redstone_blok.png/revision/latest/scale-to-width-down/250?cb=20170429185629" alt="Logo Redstone" class="img-fluid">
                    </div>
                    <h2 class="mb-4">INICIAR SESION</h2>
                    <form>
                        <div class="mb-3">
                            <label for="username" class="form-label" style="font-size: 0.9rem;">Nombre de Usuario:</label>
                            <input type="text" class="form-control" id="username" placeholder="Introduce tu usuario">
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label" style="font-size: 0.9rem;">Contraseña:</label>
                            <input type="password" class="form-control" id="password" placeholder="Introduce tu contraseña">
                        </div>
                        <!-- Párrafo para mostrar errores de login -->
                        <p id="login-error" class="text-danger text-center mt-3" style="font-family: var(--mc-font-body); font-size: 1.2rem; display: none; color: var(--mc-bright-red) !important;"></p>
                        <div class="text-center mt-4">
                            <!-- CAMBIADO: Se quitó onclick y se añadió id="login-button" -->
                            <button type="button" class="btn btn-mc" id="login-button">INGRESAR</button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        /*
          Plantilla para la vista principal (Navbar + Contenedor de contenido)
         */
        const mainViewTemplate = `
            <nav id="main-navbar" class="navbar navbar-expand-lg navbar-mc">
                <div class="container">
                    <!-- CAMBIADO: URL del logo -->
                    <a class="navbar-brand" href="#" onclick="navigateTo('main', 'home')">
                        <img src="Logo.jpg" alt="Logo">
                        GUIA REDSTONE
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarNav">
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="navigateTo('main', 'home')">Inicio</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="navigateTo('main', 'bloques')">Bloques</a>
                            </li>
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="mechanismsDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Mecanismos
                                </a>
                                <ul class="dropdown-menu" aria-labelledby="mechanismsDropdown">
                                    <li><a class="dropdown-item" href="#" onclick="navigateTo('main', 'mecanismos', 'principiante')">Principiantes</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="navigateTo('main', 'mecanismos', 'medio')">Intermedios</a></li>
                                    <li><a class="dropdown-item" href="#" onclick="navigateTo('main', 'mecanismos', 'experto')">Expertos</a></li>
                                </ul>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#" onclick="navigateTo('login')">Cerrar Sesión</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            <main id="main-content" class="container mt-4">
                <div class="row">
                    <!-- Columna de Navegación Lateral (Sidebar) -->
                    <div class="col-lg-3">
                        <div class="guides-header mb-3">
                            <h3>GUIAS DE MECANISMOS</h3>
                        </div>
                        <div class="list-group sidebar-nav">
                            <a class="list-group-item" onclick="navigateTo('main', 'bloques')">BLOQUES</a>
                            <a class="list-group-item" onclick="navigateTo('main', 'mecanismos', 'principiante')">BASICOS</a>
                            <a class="list-group-item" onclick="navigateTo('main', 'mecanismos', 'medio')">MEDIOS</a>
                            <a class="list-group-item" onclick="navigateTo('main', 'mecanismos', 'experto')">EXPERTOS</a>
                        </div>
                    </div>
                    
                    <!-- Área de contenido principal (se rellena dinámicamente) -->
                    <div class="col-lg-9">
                        <div id="content-area" class="content-area pixel-border">
                            <!-- El contenido de la sub-página se insertará aquí -->
                        </div>
                    </div>
                </div>
            </main>
        `;

        /**
         * Contenido para la pagina de inicio
         
         */
        const homeContent = `
            <h2>INFORMACION BASICA DE REDSTONE</h2>
            <div class="row align-items-center">
                <div class="col-md-8">
                    <p>La redstone es un elemento fundamental en el juego Minecraft que funciona como un simulador de electricidad, permitiendo a los jugadores crear circuitos y automatizar procesos. Se obtiene al minar un mineral rojo en el subsuelo, el cual al ser picado suelta un polvo del mismo nombre. Este polvo se utiliza para crear circuitos que pueden activar mecanismos como puertas automáticas, pistones y trampas, con un alcance máximo de 15 bloques. 
Características y usos
Simula electricidad: El polvo de redstone actúa como un cable que transmite energía desde una fuente (como una palanca, un botón o una placa de presión) hasta un dispositivo que la reciba. 
Automatización: Permite automatizar acciones y construir dispositivos complejos como granjas automáticas, ascensores e incluso computadoras dentro del juego. 
Componente de circuitos: Se puede colocar para conectar varios componentes y crear circuitos lógicos. 
Transmisión de energía: La señal de redstone puede viajar hasta 15 bloques. Para extenderla o hacerla funcionar más allá, se pueden usar elementos como repetidores. 
Dónde encontrarla
Minería: El mineral de redstone se encuentra bajo tierra, entre las capas 0 y 16, siendo más común alrededor de la capa 10. 
Mina: Requiere un pico de hierro o superior para ser minado y obtener el polvo de redstone. 
Bloque de redstone: Si se obtiene un bloque de redstone entero, se puede picar para obtener polvo o utilizarlo como una fuente de energía constan</p>
                </div>
                <div class="col-md-4">
                    <img src="PRcueva.jpg" alt="Redstone en Minecraft" class="img-fluid">
                </div>
            </div>
        `;

        /**
         * Contenido para la página de bloques
         * 
         */
        const bloquesContent = `
            <h2>INFORMACION SOBRE BLOQUES</h2>
            
            <!-- Entrada de Bloque 1 -->
            <div class="block-entry">
                <h3>INFORMACION SOBRE EL BLOQUE: ANTORCHA DE REDSTONE</h3>
                <div class="row mb-3">
                    <div class="col-md-8">
                        <p>La antorcha de redstone es una fuente de energía constante en Minecraft que puede activar circuitos de redstone, actuar como un inversor de señal ("puerta NOT"), y apagar su propia señal al recibir energía en el bloque que la soporta. También es útil como fuente de luz y para generar mecanismos complejos al combinarse con otros componentes. 
Funciones principales
Fuente de energía: Proporciona una señal de redstone que se extiende hasta 15 bloques de cable y puede alimentar bloques adyacentes y el bloque justo encima. 
Inversor de señal: Su utilidad más importante es invertir la señal. Cuando el bloque donde está colocada recibe energía, la antorcha se apaga, lo que se aprovecha para crear circuitos lógicos como la puerta NOT. 
Activación de dispositivos: Permite activar pistones, puertas, dispensadores y otros componentes de redstone a distancia. 
Construcción de mecanismos: Es un componente fundamental para crear circuitos avanzados, relojes y cerraduras de combinación al combinarse con otros componentes como repetidores y comparadores</p>
                    </div>
                    <div class="col-md-4">
                        <img src="Antorcha1.jpg" alt="Antorcha de Redstone" class="img-fluid">
                    </div>
                </div>
                <div class="row">
                    <div class="col-3"><img src="Antorchasuelo.jpg" class="img-fluid"></div>
                    <div class="col-3"><img src="Antorchasuelo0.jpg" class="img-fluid"></div>
                    <div class="col-3"><img src="Antorchabloque.jpg" class="img-fluid"></div>
                    
                </div>
            </div>
            
            <hr style="border-top: 4px solid var(--mc-medium-grey);">

            <!-- Entrada de Bloque 2 -->
            <div class="block-entry mt-4">
                <h3>INFORMACION SOBRE EL BLOQUE: REPETIDOR</h3>
                <div class="row">
                    <div class="col-md-4">
                        <img src="Repetidor.jpg" alt="Repetidor de Redstone" class="img-fluid mb-3">
                    </div>
                    <div class="col-md-8">
                        <p>La función principal de un repetidor de redstone es extender la señal de redstone más allá del límite de 15 bloques, actuando como un amplificador. Además, puede retrasar la señal en 1 a 4 ticks (0.1 a 0.4 segundos) y funciona como un diodo, permitiendo que la corriente fluya en una sola dirección. También tiene la capacidad de bloquearse, manteniendo su estado de energía incluso si la señal de entrada desaparece         Funciones detalladas     Extender la señal: La señal de redstone pierde potencia con la distancia. Un repetidor recibe la señal y la "reinicia" con la máxima intensidad, permitiendo que el circuito continúe por otros 15 bloques.  Retrasar la señal: Al hacer clic derecho en un repetidor, puedes configurar un retardo entre 1 y 4 tics. Cada tic es 0.1 segundos, por lo que un repetidor puede introducir un retraso de hasta 0.4 segundos. Esto es útil para sincronizar mecanismos complejos o crear relojes de redstone.  Actuar como diodo: La corriente solo puede entrar por la parte ancha del repetidor y salir por la punta de la flecha, impidiendo que la energía fluya hacia atrás.  Bloquearse: Un repetidor puede ser "bloqueado" si otro repetidor o un bloque de redstone le emite energía por un lado. Cuando está bloqueado, el repetidor mantiene su estado actual (encendido o apagado), lo cual es útil para crear pestillos. </p>
                    </div>
                </div>
                <!-- Fila de 4 imágenes añadida -->
                <div class="row mt-3">
                    <div class="col-3"><img src="Repetidorfases.jpg" class="img-fluid"></div>
                    <div class="col-3"><img src="Repetidor1.jpg" class="img-fluid"></div>
                    <div class="col-3"><img src="Repetidor01.jpg" class="img-fluid"></div>
                  
            </div>
        `;

        /*
          Contenido para la página de "Mecanismos" (Acordeón)
         */
        function getMecanismosContent(level) {
            let title = "MECANISMOS";
            if (level === 'principiante') title = "MECANISMOS PARA PRINCIPIANTES";
            if (level === 'medio') title = "MECANISMOS DE DIFICULTAD MEDIA";
            if (level === 'experto') title = "MECANISMOS PARA EXPERTOS";

            s
            let mecanismos = [{
                id: "mec1",
                nombre: "PUERTA AUTOMATICA 2x2",
                nivel: "principiante",
                gifUrl: "VPuerta.gif",
                stepImages: [ // Array de imágenes 
                    "PPaso1.jpg",
                    "PPaso2.jpg",
                    "PPaso3.jpg",
                    "PPaso4.jpg"
                ],
                descripcion: `
                    <p>Mecanismo paso a paso: Esta es la descripción individual de la <strong>Puerta Automática 2x2</strong>. Es un mecanismo excelente para principiantes.</p>
                    <p>Se necesitan pistones, redstone, botones y un bloque de tu elección. Sigue las imágenes para ver cómo conectarlo todo.</p>
                `
            }, {
                id: "mec2",
                nombre: "GRANJA DE CAÑA DE AZUCAR",
                nivel: "principiante",
                gifUrl: "VCana.gif",
                stepImages: [
                    "CPaso1.jpg",
                    "CPaso2.jpg",
                    "CPaso3.jpg",
                    "CPaso4.jpg"
                ],
                descripcion: `
                    <p>Mecanismo paso a paso: Esta granja de caña de azúcar es automática y muy eficiente.</p>
                    <p>Utiliza observadores para detectar el crecimiento y pistones para cortar la caña. El agua la recoge en una tolva.</p>
                `
            }, {
                id: "mec3",
                nombre: "ASCENSOR DE AGUA",
                nivel: "experto",
                gifUrl: "VElevador.gif",
                stepImages: [
                    "EPaso1.jpg",
                    "EPaso2.jpg",
                    "Epaso3.jpg",
                    "EPaso4.jpg"
                ],
                descripcion: `
                    <p>Mecanismo paso a paso: Un ascensor de agua te permite subir y bajar rápidamente usando arena de almas y bloques de magma.</p>
                    <p>No requiere mucha redstone, pero es un mecanismo esencial de transporte vertical.</p>
                `
            }, {
                id: "mec4",
                nombre: "SUPER HORNO",
                nivel: "medio",
                gifUrl: "VHorno.gif",
                stepImages: [
                    "VPaso1.jpg",
                    "VPaso2.jpg",
                    "VPaso3.jpg",
                    "VPaso4.jpg"
                ],
                descripcion: `
                    <p>Mecanismo paso a paso: El super horno utiliza un sistema de tolvas para distribuir combustible y items a múltiples hornos a la vez.</p>
                    <p>Es perfecto para cocinar grandes cantidades de items de forma rápida y eficiente.</p>
                `
            }];

            // Filtrar mecanismos por nivel
            let filteredMecanismos = mecanismos.filter(m => m.nivel === level);
            // if (filteredMecanismos.length === 0) filteredMecanismos = mecanismos; // <- Esta línea se elimina, causaba el error.

            let accordionHTML = filteredMecanismos.map((m, index) => `
                <div class="accordion-item">
                    <h2 class="accordion-header" id="heading-${m.id}">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${m.id}" aria-expanded="false" aria-controls="collapse-${m.id}">
                            MECANISMO NO.${index + 1} < ${m.nombre} >
                        </button>
                    </h2>
                    <div id="collapse-${m.id}" class="accordion-collapse collapse" aria-labelledby="heading-${m.id}" data-bs-parent="#mecanismos-accordion">
                        <div class="accordion-body">
                            <h3>INFORMACION SOBRE EL MECANISMO</h3>
                            <div class="row">
                                <div class="col-md-8">
                                    <!-- CAMBIADO: Ahora usa la descripcion individual -->
                                    ${m.descripcion}
                                </div>
                                <div class="col-md-4">
                                    <!-- CAMBIADO: Ahora usa la gifUrl del mecanismo -->
                                    <img src="${m.gifUrl}" alt="GIF del Mecanismo ${m.nombre}" class="img-fluid">
                                </div>
                            </div>
                            <!-- CAMBIADO: Ahora usa el array stepImages del mecanismo -->
                            <div class="row mt-3">
                                <div class="col-3"><img src="${m.stepImages[0]}" class="img-fluid" alt="Paso 1"></div>
                                <div class="col-3"><img src="${m.stepImages[1]}" class="img-fluid" alt="Paso 2"></div>
                                <div class="col-3"><img src="${m.stepImages[2]}" class="img-fluid" alt="Paso 3"></div>
                                <div class="col-3"><img src="${m.stepImages[3]}" class="img-fluid" alt="Paso 4"></div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');

            return `
                <h2>${title}</h2>
                <div class="accordion" id="mecanismos-accordion">
                    ${accordionHTML}
                </div>
            `;
        }

        // --- LÓGICA DE NAVEGACIÓN ---

        let currentPage = '';
        let currentSubPage = '';

        /**
         *  Manejar el intento de login
         */
        function handleLogin() {
            const usernameInput = document.getElementById('username');
            const passwordInput = document.getElementById('password');
            const errorElement = document.getElementById('login-error');

            const username = usernameInput ? usernameInput.value : '';
            const password = passwordInput ? passwordInput.value : '';

            // Validación de usuario y contraseña
            if (username === "Aby" && password === "12345678") {
                if (errorElement) errorElement.style.display = 'none';
                navigateTo('main'); // Navega a la página principal si es correcto
            } else {
                // Muestra error si es incorrecto
                if (errorElement) {
                    errorElement.textContent = "Usuario o contraseña incorrectos.";
                    errorElement.style.display = 'block';
                }
            }
        }


        /*
          Navega entre las vistas principales y sub-vistas
          La vista principal ('login' o 'main')
          La sub-página ('home', 'bloques', 'mecanismos')
          Parámetro extra (ej. 'principiante')
         */
        function navigateTo(page, subPage = 'home', param = null) {
            // Si navegamos a una vista principal diferente (ej. de Login a Main)
            if (page !== currentPage) {
                if (page === 'login') {
                    app.innerHTML = loginViewTemplate;
                    //  listener de boton de login
                    const loginButton = document.getElementById('login-button');
                    if (loginButton) {
                        loginButton.addEventListener('click', handleLogin);
                    }
                } else if (page === 'main') {
                    app.innerHTML = mainViewTemplate;
                    // El navbar y el sidebar ahora existen

                    navigateToSubPage(subPage, param);
                }
                currentPage = page;
            } else if (page === 'main') {
                // Si ya estamos en main solo cambiamos la sub-página
                navigateToSubPage(subPage, param);
            }
        }

        /**
         * Renderiza el contenido dentro del #content-area de la vista principal
         */
        function navigateToSubPage(subPage, param) {
            if (currentSubPage === subPage && !param) return; // Ya estamos ahí

            const contentArea = document.getElementById('content-area');
            if (!contentArea) return; // Seguridad

            let content = '';
            if (subPage === 'home') {
                content = homeContent;
            } else if (subPage === 'bloques') {
                content = bloquesContent;
            } else if (subPage === 'mecanismos') {
                content = getMecanismosContent(param); // param será principiante, medio, avanzado.
            }

            contentArea.innerHTML = content;
            currentSubPage = subPage;

            // Actualizar estado activo en la navegación lateral
            updateSidebarActiveState(subPage, param);
        }

        /**
         * Resalta el ítem activo en el sidebar
         */
        function updateSidebarActiveState(subPage, param) {
            const sidebarLinks = document.querySelectorAll('.sidebar-nav .list-group-item');
            sidebarLinks.forEach(link => {
                link.classList.remove('active');
                const linkText = link.textContent.toLowerCase();

                if (subPage === 'bloques' && linkText === 'bloques') {
                    link.classList.add('active');
                } else if (subPage === 'mecanismos') {
                    if (param === 'principiante' && linkText === 'basicos') {
                        link.classList.add('active');
                    } else if (param === 'medio' && linkText === 'medios') {
                        link.classList.add('active');
                    } else if (param === 'experto' && linkText === 'expertos') {
                        link.classList.add('active');
                    }
                }
            });
        }

        // Cargar la página de inicio de sesión al iniciar
        document.addEventListener('DOMContentLoaded', () => {
            navigateTo('login');
        });
    </script>

</body>

</html>